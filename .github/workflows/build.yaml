name: Build library

on:
  push

env:
  REGISTRY: ghcr.io
  BUILD_IMAGE: ghcr.io/umroboticsteam/umrt-build:testing-docker-build

jobs:
  build:
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    runs-on: ubuntu-latest

    permissions:
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Log in to the container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build and package in potentially emulated Docker container
        run: |
          docker run \
            --rm \
            -v $(pwd):/${{ github.workspace }} \
            -w ${{ github.workspace }} \
            --platform linux/${{ matrix.arch }} \
            ${{ env.BUILD_IMAGE }}
            cmake -DCMAKE_BUILD_TYPE=Release -S /path/to/source-dir -B /path/to/build-dir && \
            cmake --build output-build &&
            cd output-build &&
            cpack -G DEB

      - name: Encrypt deb
        working-directory: ./output-packages
        run: |
          echo -n "$APT_SIGNING_PUBKEY" | gpg --import
          gpg --encrypt --recipient exec.umrt@gmail.com --trust-model tofu --use-embedded-filename *.deb
        env:
          APT_SIGNING_PUBKEY: ${{ secrets.APT_SIGNING_PUBKEY }}

      - name: Pass encrypted deb to publishing container
        uses: actions/upload-artifact@v4
        with:
          name: encrypted-deb-${{ matrix.arch }}
          path: "output-packages/*.deb.gpg"

  publish:
    needs: build

    runs-on: ubuntu-latest
    container:
      image: ghcr.io/umroboticsteam/umrt-apt-image:initial-setup

    permissions:
      contents: write
      packages: read

    steps:
      - name: Download deb
        uses: actions/download-artifact@v4
        with:
          name: encrypted-deb-amd64
          path: ./deb

#      - name: Checkout apt repo
#        uses: actions/checkout@v4
#        with:
#          repository: 'UMRoboticsTeam/umrt-apt-repo'
#          path: ./apt
#          ref: 'testing-ci-cd'
#          # Note that this is persisted in the local Git config until the post-job task
#          persist-credentials: true
#          ssh-key: ${{ secrets.APT_DEPLOY_KEY }}
#
#      - name: Load signing key and decrypt deb
#        working-directory: ./deb
#        run: |
#          echo -n "$APT_SIGNING_KEY" | gpg --import
#          gpg --decrypt --use-embedded-filename *.deb.gpg
#          rm *.deb.gpg
#        env:
#          APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}
#
#      - name: Checkout source for tagging
#        uses: actions/checkout@v4
#        with:
#          path: ./src
#
#      - name: Parse version number
#        working-directory: ./src
#        # Save version number into an environment variable for use in different steps
#        run: echo "PKG_VERSION=$(echo "$(grep -Po 'PROJECT_VERSION_MAJOR \K\d+' cpack.cmake).$(grep -Po 'PROJECT_VERSION_MINOR \K\d+' cpack.cmake).$(grep -Po 'PROJECT_VERSION_PATCH \K\d+' cpack.cmake)")" >> "$GITHUB_ENV"
#        shell: bash
#
#      - name: Publish debians
#        working-directory: ./apt
#        run: reprepro --section arm --component main --priority 0 includedeb humble ../deb/*.deb
#
#      - name: Push apt repo
#        working-directory: ./apt
#        shell: bash
#        run: |
#          git config user.name 'University of Manitoba Robotics Team Build Server'
#          git config user.email 'exec.umrt@gmail.com'
#          git config user.signingkey "$(gpg --list-signatures $(git config --get user.email) | sed -n '/^\s/s/\s*//p')"
#          git add --all
#          git commit -S -m "Uploaded version ${{ env.PKG_VERSION }} of ${{ github.repository }}"
#          git push origin
#
#      - name: Create version tag
#        uses: actions/github-script@v5
#        with:
#          script: |
#            const {PKG_VERSION} = process.env
#            github.rest.git.createRef({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              ref: `refs/tags/v${PKG_VERSION}`,
#              sha: context.sha
#            })

  cleanup:
    # Always run after all these jobs, regardless of if they succeed
    if: ${{ always() }}
    needs:
      - build
      - publish

    runs-on: ubuntu-latest

    steps:
      - name: Delete amd64 deb artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: encrypted-deb-amd64

      - name: Delete arm64 deb artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: encrypted-deb-arm64